<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: regexp | 8xx8 (Андрей Кулаков)]]></title>
  <link href="http://8xx8.ru/tags/regexp/atom.xml" rel="self"/>
  <link href="http://8xx8.ru/"/>
  <updated>2017-12-14T00:16:50+07:00</updated>
  <id>http://8xx8.ru/</id>
  <author>
    <name><![CDATA[Andrey Kulakov (8xx8)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Полезные в работе регулярные выражения]]></title>
    <link href="http://8xx8.ru/blog/2011/11/08/polieznyie-v-rabotie-rieghuliarnyie-vyrazhieniia/"/>
    <updated>2011-11-08T00:26:00+07:00</updated>
    <id>http://8xx8.ru/blog/2011/11/08/polieznyie-v-rabotie-rieghuliarnyie-vyrazhieniia</id>
    <content type="html"><![CDATA[<p>Зачастую в рабочем процессе требуется проверить данные введённые пользователем или полученные из другого источника.</p>

<p>Данная задача элегантно решается с помощью регулярных выражений.</p>

<!-- more -->


<p>Привожу далее список регулярных выражений используемых мной. Данный список будет пополняться с течением времени. Если есть предложения чем пополнить его, пишите.</p>

<p>```php
/<em>
 * Юзернейм
 *
 * Буквы, цифры, дефисы и подчёркивания, от 3 до 16 символов.
 * Начинаться должно всегда с буквы латинского алффавита
 </em>/</p>

<pre><code>preg_match('%^[a-z][a-z0-9_-]{3,16}$%', $userName);
</code></pre>

<p>/<em>
 * Пароль
 *
 * То же что и юзер нейм только от 6 символов и может начинаться с цыфры
 </em>/</p>

<pre><code>preg_match('%^[a-z0-9_-]{6,18}$%', $password);
</code></pre>

<p>/<em>
 * XML тег
 *
 * За открывающей скобкой &lt; должно стоять слово из букв — имя элемента, затем могут быть атрибуты
 * — любые символы, кроме закрывающей скобки >. Далее — любой текст (содержимое) и закрывающий тэг,
 * т.е. &lt;имя />, или как минимум один пробел, слэш и закрывающаю скобка (самозакрывающийся тэг).
 </em>/</p>

<pre><code>preg_match('%&lt;([a-z]+)([^&gt;]+)*(?:&gt;(.*)&lt;/\1&gt;|\s+/&gt;)$%', $xmlTag);
</code></pre>

<p>/<em>
 * Email
 *
 * Общий вид — логин@поддомен.домен. Логин, как и поддомен — слова из букв, цифр, подчёркиваний,
 * дефисов и точек. А домен (имеется в виду 1го уровня) — это от 2 до 6 букв и точек.
 </em>/</p>

<pre><code>preg_match('%^([a-z0-9_\.-]+)@([a-z0-9_\.-]+)\.([a-z\.]{2,6})$%', $email);
</code></pre>

<p>/<em>
 * URL
 *
 * Первым делом — необязательный протокол (<a href="http://">http://</a> или <a href="https://">https://</a>), затем последовательность букв,
 * цифр, дефисов, подчёркиваний и точек (домены уровня > 1), потом домен нулевого уровня (от 2 до
 * 6 букв и точек) и, наконец, файловая структура — набор слов из букв, цифр, дефисов, подчёркиваний
 * и точек со слэшем в конце. Всё это может завершаться опять-таки слэшем.
 </em>/</p>

<pre><code>preg_match('%^(https?://)?([\da-z\.-]+)\.([a-z\.]{2,6})([/\w \.-]*)*/?$%', $url);
</code></pre>

<p>/<em>
 * IP адрес
 *
 * 4 группы цифр (от 1 до 3 цифр в каждой) разделены точками. Если группа состоит из 3 символов,
 * то первый из них — 1 или 2; если 1, то остальные от 0 до 9, а если 2 — то второй от 0 до 5;
 * если второй символ от 0 до 4, то третий — от 0 до 9, а если второй 5 — то третий от 0 до 5.
 * Если же группа состоит из 2 символов, то первый — от 1 до 9, второй — от 0 до 9. В случае
 * односимвольной группы этим символом может быть цифра от 1 до 9.
 </em>/</p>

<pre><code>preg_match('%^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$%', $ip);
</code></pre>

<p>/<em>
 * Комментаррии CSS
 * Находим первое вхождение слеш звёздочка, далее берём любой символ или последовательность
 * слеш звёздочка, пока не встретится последовательность звёздочка слеш. Квантификатор не жадный, по этому
 * матчит ближайшие открывающие и закгрывающие вхождения оставляя внутри открывающие
 </em>/</p>

<pre><code>preg_match_all("%/\*(.|[^/*])*?\*/\s+%i", $cssCode, $comments);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
